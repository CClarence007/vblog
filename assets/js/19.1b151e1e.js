(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{531:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"了解javascript深拷贝与浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解javascript深拷贝与浅拷贝"}},[t._v("#")]),t._v(" 了解Javascript深拷贝与浅拷贝")]),t._v(" "),a("ol",[a("li",[a("h3",{attrs:{id:"深拷贝、浅拷贝概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝、浅拷贝概念"}},[t._v("#")]),t._v(" 深拷贝、浅拷贝概念")])])]),t._v(" "),a("p",[t._v("在学习JS时可能经常听到深拷贝、浅拷贝这两个概念，那么它们的概念和区别时什么呢？"),a("br"),t._v(" "),a("font",{attrs:{color:"red"}},[t._v("\n浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是指向同一块内存；"),a("br"),t._v("深拷贝会另外创造一个一模一样的对象，新旧对象所指的内存不同，所以深拷贝修改新对象不会改到旧对象;")]),t._v(" "),a("br")],1),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("h3",{attrs:{id:"常用数据类型的深浅拷贝判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用数据类型的深浅拷贝判断"}},[t._v("#")]),t._v(" 常用数据类型的深浅拷贝判断")])])]),t._v(" "),a("p",[t._v("在上一篇文章——"),a("a",{attrs:{href:"/vblog/articles/learn/004"}},[t._v("javascript数据类型判断")]),t._v(" 中，提到过JS主要有两类数据类型："),a("br")]),t._v(" "),a("ul",[a("li",[t._v("基本数据类型 "),a("code",[t._v("(Boolean, Number, String, undefined, BigInt, Symbol, Null )")])]),t._v(" "),a("li",[t._v("复杂数据类型 "),a("code",[t._v("(Object)")]),t._v("\n其中，基本数据类型是保存在栈内存的，复杂数据类型是保存在堆类型的，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中；"),a("br")])]),t._v(" "),a("p",[t._v("所以，当基本数据类型拷贝时，只需要在栈中分配一个新值和旧值一样就行，根据深浅拷贝的概念，所以基本数据类型的拷贝是深拷贝；"),a("br"),t._v("\n而对于复杂数据类型拷贝时，系统也为新的变量在栈内存中分配了一个值，但这个值指向的堆中的对象是不变的，即和旧对象具有同一个对象的引用，那当新对象的值改变时，会改变引用的指向的堆内存，旧对象也会一起改变，所以复杂数据类型的引用是浅拷贝；"),a("br"),t._v("\n3. ### 深拷贝的实现以及手写深拷贝方法")]),t._v(" "),a("ol",[a("li",[a("h4",{attrs:{id:"json-parse-json-stringfy-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-parse-json-stringfy-方法"}},[t._v("#")]),t._v(" JSON.parse(JSON.stringfy())方法")])])]),t._v(" "),a("p",[t._v("这种方法最为简单暴力，对于简单的JSON格式对象是可以的，但是还是会有如下缺点：")]),t._v(" "),a("ul",[a("li",[t._v("这样会丢失原对象的constructor，失去之前的构造函数")]),t._v(" "),a("li",[t._v("对于set，map，Date，RegExp等特殊对象会在转换的时候丢失")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("h4",{attrs:{id:"函数库lodash的-clone方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数库lodash的-clone方法"}},[t._v("#")]),t._v(" 函数库lodash的_.clone方法")])])]),t._v(" "),a("p",[t._v("这种方法引入lodash库就可以了，但是面试时不能这么说啊，所以还是老老实实琢磨下怎么自己手写个像样的深拷贝吧")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("h4",{attrs:{id:"递归实现深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归实现深拷贝"}},[t._v("#")]),t._v(" 递归实现深拷贝")])])]),t._v(" "),a("p",[t._v("既然这样，那就自己手写一个深拷贝吧"),a("br"),t._v("\n首先思路如下："),a("br")]),t._v(" "),a("ol",[a("li",[t._v("如果是基本类型：无需继续拷贝，直接返回；但考虑到ES6新加入的数据类型Symbol，在for in 中是取不到的，所以使用Reflect.ownKeys()来遍历该属性")]),t._v(" "),a("li",[t._v("如果是复杂类型，则需要递归取值")]),t._v(" "),a("li",[t._v("循环引用的情况，如"),a("code",[t._v("obj.param = obj")]),t._v("使用WeakMap做个缓存取值")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//手写深拷贝方法deepClone")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果为基本类型")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否为数组")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cloneObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否为循环引用")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cloneObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//递归取值赋值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" Reflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ownKeys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cloneObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deepClone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cloneObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("这个深拷贝基本实现了对基本对象的深拷贝，但还有一些问题：")]),t._v(" "),a("ul",[a("li",[t._v("如果对象的value值为set，map，Date，RegExp这些没有做特殊处理，不能拷贝")]),t._v(" "),a("li",[t._v("但如果是面试，手写到这些也就够了，其他这些可以使用构造函数重新构造一个")])])])}),[],!1,null,null,null);s.default=e.exports}}]);