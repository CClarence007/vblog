(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{547:function(t,a,e){"use strict";e.r(a);var i=e(6),o=Object(i.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"了解前端缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#了解前端缓存"}},[t._v("#")]),t._v(" 了解前端缓存")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[t._v("前端缓存分为HTTP缓存和浏览器缓存。HTTP缓存是在HTTP请求传输时用到的缓存，在服务器上设置；浏览器缓存则主要由前端开发在前端设置；")])]),e("ol",[e("li",[e("h3",{attrs:{id:"http缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http缓存"}},[t._v("#")]),t._v(" HTTP缓存")])])]),t._v(" "),e("p",[t._v("浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果及缓存标识")]),t._v(" "),e("h4",{attrs:{id:"_1-1-强制缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-强制缓存"}},[t._v("#")]),t._v(" 1.1 强制缓存")]),t._v(" "),e("p",[t._v("强缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。")]),t._v(" "),e("ul",[e("li",[t._v("1.不存在该缓存结果和标识，强制缓存失效，直接向服务器发送请求。")]),t._v(" "),e("li",[t._v("2.存在该缓存结果和缓存标识，但结果已失效，则使用协商缓存；")]),t._v(" "),e("li",[t._v("3.存在该缓存结果和缓存标识，且结果未失效，强制缓存生效，直接返回该结果；")])]),t._v(" "),e("p",[t._v("浏览器在向服务器发送请求时，服务器会将缓存规则放入HTTP响应报文的头中和响应结果一起返回给浏览器，控制强制缓存的字段分别是Expires和Cache-Control,其中Cache-Control优先级比Expires高；")]),t._v(" "),e("ul",[e("li",[t._v("Expires\n过期时间")]),t._v(" "),e("li",[t._v("Cache-Control\nmax-age=XXX 缓存多少秒后失效，这个优先级高于Expires")])]),t._v(" "),e("h4",{attrs:{id:"_1-2-协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-协商缓存"}},[t._v("#")]),t._v(" 1.2 协商缓存")]),t._v(" "),e("p",[t._v("协商缓存就是强制缓存第二种情况，结果已失效的时候，浏览器会携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。")]),t._v(" "),e("ul",[e("li",[t._v("1.协商缓存生效。返回304，直接使用浏览器缓存；")]),t._v(" "),e("li",[t._v("2.协商缓存失效，返回200和请求结果；\n同强制缓存一样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别是\nLast-Modified/If-Modified-Since 和 Etag/If-None-Match.其中Etag/If-None-Match优先级更高；")]),t._v(" "),e("li",[t._v("Last-Modified(服务器返回时)/If-Modified-Since(浏览器请求时)\nLast-Modified是服务器响应请求时，返回该资源文件在服务器最后被修改的时间；\nIf-Modified-Since 是客户端再次发起请求时所携带的Last-Modified的值，通过此字段来告诉服务器该资源上次请求的最后修改时间；\n如果服务器最后修改资源时间大于此值，则缓存失效，重新返回资源，状态码200；否则返回304，代表资源无更新；")]),t._v(" "),e("li",[t._v("Etag(服务器返回时)/If-None-Match(服务器返回时)\nEtag是服务器响应请求时，返回当前资源文件的唯一标识，由服务器生成；\nif-None-Match是由客户端再次发起该请求时所携带的Etag的值，通过此字段来告诉服务器该资源上次请求时的唯一标识。服务器收到该值后会与所在服务器的Etag值做对比，如果不一致，则重新返回资源，状态码200；否则返回304，代表资源无更新；")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("h3",{attrs:{id:"浏览器缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[t._v("#")]),t._v(" 浏览器缓存")])])]),t._v(" "),e("h4",{attrs:{id:"_2-1-cookie"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-cookie"}},[t._v("#")]),t._v(" 2.1 Cookie")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("name和value\nname是cookie的名称，cookie一旦创建，名称就不可更改；value是对应的cookie的值")])]),t._v(" "),e("li",[e("p",[t._v("Domain\ndomain决定cookie在哪个域是有效的")])]),t._v(" "),e("li",[e("p",[t._v("Path\ncookie的有效路径")])]),t._v(" "),e("li",[e("p",[t._v("Expires/Max-age\n均为cookie的有效期。Expires是cookie被删除时的时间戳，若设置为以前的时间，则立即被删除；不设置默认页面关闭时删除；\nMax-age也是cookie的有效期，但它的单位是秒，是多长时间后失效，若Max-Age的时间为0，立即失效，设置为负数则页面关闭时失效；")])]),t._v(" "),e("li",[e("p",[t._v("Size\ncookie的大小")])]),t._v(" "),e("li",[e("p",[t._v("httpOnly\n设为true时，不允许根据document.cookie去更改这个值；")])]),t._v(" "),e("li",[e("p",[t._v("secure\n设为true时，浏览器不会在HTTP传输此cookie，只会在HTTPS和SSL等安全协议中使用；")])]),t._v(" "),e("li",[e("p",[t._v("SameSite\n限制来自第三方的cookie，从而减少安全风险；")])]),t._v(" "),e("li",[e("p",[t._v("Priority\n优先级，当cookie的数量超出时，低优先级的cookie会被优先删除；")])])]),t._v(" "),e("h4",{attrs:{id:"_2-2-localstorage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-localstorage"}},[t._v("#")]),t._v(" 2.2 localStorage")]),t._v(" "),e("ul",[e("li",[t._v("在同源的所有标签页和窗口之间共享数据")]),t._v(" "),e("li",[t._v("数据不会过期。它在浏览器重启甚至系统重启后仍然存在；")])]),t._v(" "),e("h4",{attrs:{id:"_2-3-sessionstorage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-sessionstorage"}},[t._v("#")]),t._v(" 2.3 sessionStorage")]),t._v(" "),e("ul",[e("li",[t._v("sessionStorage仅存在于当前浏览器标签页；")]),t._v(" "),e("li",[t._v("具有相同页面的另一个标签页将会有不同的存储；")]),t._v(" "),e("li",[t._v("数据在页面刷新后仍然保留，但是在关闭、重新打开浏览器标签页之后不会保留；")])])])}),[],!1,null,null,null);a.default=o.exports}}]);